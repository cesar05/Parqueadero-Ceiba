buildscript {
	ext {
		springBootVersion = '2.0.3.RELEASE'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
	}
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'jacoco'

group = 'co.com.ceiba'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
	jcenter()
}


dependencies {
	compile('org.springframework.boot:spring-boot-starter-data-jpa')
	compile('org.springframework.boot:spring-boot-starter-web')	
	compile('joda-time:joda-time:2.10')	
	compile('org.hibernate:hibernate-core:5.2.9.Final')
	runtime('com.h2database:h2')
	testCompile('org.springframework.boot:spring-boot-starter-test')
	testCompile('org.hamcrest:hamcrest-core:1.3')
	testCompile('org.mockito:mockito-all:1.10.19')
	
	compile group: 'org.seleniumhq.selenium', name: 'selenium-java', version: '3.13.0'
	compile group: 'org.seleniumhq.selenium', name: 'selenium-support', version: '3.13.0'
	
}

test{
	jacoco{
		append=false
		destinationFile =file("build/jacoco/jacocoTest.exec")
	}
	reports.junitXml.destination=file("build/jacoco/test-results")
}

def webappDir = "$projectDir/src/main/Parqueadero-Ceiba-Front"

sourceSets {
	main {
		resources {
			srcDirs = ["$webappDir/dist", "$projectDir/src/main/resources"]
		}
	}
}

processResources {
	dependsOn "buildAngular"
}

task buildAngular(type:Exec) {
	// installAngular should be run prior to this task
	dependsOn "installAngular"
	workingDir "$webappDir"
	inputs.dir "$webappDir"
	// Add task to the standard build group
	group = BasePlugin.BUILD_GROUP
	// ng doesn't exist as a file in windows -> ng.cmd
	if (System.getProperty("os.name").toUpperCase().contains("WINDOWS")){
		commandLine "ng.cmd", "build"
	} else {
		commandLine "ng", "build"
	}
}

task installAngular(type:Exec) {
	workingDir "$webappDir"
	inputs.dir "$webappDir"
	group = BasePlugin.BUILD_GROUP
	if (System.getProperty("os.name").toUpperCase().contains("WINDOWS")){
		commandLine "npm.cmd", "install"
	} else {
		commandLine "npm", "install"
	}
}
